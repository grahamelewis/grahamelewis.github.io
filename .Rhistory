df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHL646NWDB)
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
df <- bind_rows(df_SK, df_PH)
View(df)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
select(year, realGDP, country)
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
View(df)
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country") +
theme_minimal() +
scale_x_discrete(breaks = seq(1960, 2020, by = 5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df)
View(df)
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP per capita of South Korea and Philippines",
x = "Year",
y = "Real GDP per capita (in billions of USD)",
color = "Country") +
theme_minimal() +
scale_x_discrete(breaks = seq(1960, 2020, by = 5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country") +
theme_minimal(
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country")
View(df)
View(df)
View(df)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
select(year, realGDP, country)
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
# Plot the data
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country")
ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
View(df)
df <- bind_rows(df_SK, df_PH)
df <- df %>%
mutate(
year    = as.numeric(as.character(year)),
realGDP = as.numeric(realGDP),
country = trimws(as.character(country))
)
# Plot the data
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
scale_x_continuous(breaks = seq(1960, 2020, by = 10)) +
theme_minimal() +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
scale_x_continuous(breaks = seq(1960, 2020, by = 10)) +
scale_y_continuous(labels = scales::dollar_format( suffix = "")) +
theme_minimal() +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
library(pwt10)      # Penn World Table v10
library(ggplot2)
library(dplyr)
# Load the dataset
data("pwt10")
df <- subset(pwt10.01, year == 2019)
df <- transform(df,
gdp_pc = rgdpo / pop   # GDP per capita (2017 USD)
)
df <- subset(df,
!is.na(gdp_pc) & !is.na(hc) &
gdp_pc  > 0    &
hc  > 0
)
data("pwt10.01")
df <- subset(pwt10.01, year == 2019)
df <- transform(df,
gdp_pc = rgdpo / pop   # GDP per capita (2017 USD)
)
df <- subset(df,
!is.na(gdp_pc) & !is.na(hc) &
gdp_pc  > 0    &
hc  > 0
)
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1000, 5000, 15000, 30000, 60000, 100000, 150000, 250000, 400000, 600000),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "Human Capital",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
library(scales)     # dollar_format()
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1000, 5000, 15000, 30000, 60000, 100000, 150000, 250000, 400000, 600000),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "Human Capital",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
View(df)
View(df)
df <- df %>%
select(country, gdp_pc, hc)
View(df)
data("pwt10.01")
df <- subset(pwt10.01, year == 2019)
df <- transform(df,
gdp_pc = rgdpo / pop   # GDP per capita (2017 USD)
)
df <- subset(df,
!is.na(gdp_pc) & !is.na(hc) &
gdp_pc  > 0    &
hc  > 0
)
# Keep only the necessary columns
df <- df %>%
select(country, gdp_pc, hc)
View(df)
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1e3, 5e3, 1e4, 2e4, 4e4, 6e4),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "Human Capital",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1e3, 5e3, 1e4, 2e4, 4e4, 6e4, 1e5),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "Human Capital",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
View(df)
library(pwt10)      # Penn World Table v10
library(ggplot2)
library(dplyr)
library(scales)     # dollar_format()
# Load the dataset
data("pwt10.01")
df <- subset(pwt10.01, year == 2019)
df <- transform(df,
gdp_pc = rgdpo / pop   # GDP per capita (2017 USD)
)
df <- subset(df,
!is.na(gdp_pc) & !is.na(hc) &
gdp_pc  > 0    &
hc  > 0
)
# Drop Venezuela (Bolivarian Republic of)
df <- df %>%
filter(country != "Venezuela (Bolivarian Republic of)")
# Keep only the necessary columns
df <- df %>%
select(country, gdp_pc, hc)
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1e3, 5e3, 1e4, 2e4, 4e4, 6e4, 1e5),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "Human Capital",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
library(pwt10)      # Penn World Table v10
library(ggplot2)
library(dplyr)
library(scales)     # dollar_format()
# Load the dataset
data("pwt10.01")
df <- subset(pwt10.01, year == 2019)
df <- transform(df,
gdp_pc = rgdpo / pop   # GDP per capita (2017 USD)
)
df <- subset(df,
!is.na(gdp_pc) & !is.na(hc) &
gdp_pc  > 0    &
hc  > 0
)
# Drop Venezuela (Bolivarian Republic of)
df <- df %>%
filter(country != "Venezuela (Bolivarian Republic of)")
# Keep only the necessary columns
df <- df %>%
select(country, gdp_pc, hc)
ggplot(df, aes(x = gdp_pc, y = hc)) +
# points
geom_point(alpha = 0.6, size = 2, color = "steelblue") +
# log scales with nice breaks & dollar formatting
scale_x_log10(
breaks = c(1e3, 5e3, 1e4, 2e4, 4e4, 6e4, 1e5),
labels = dollar_format(prefix = "$", suffix = "k", scale = 1e-3, accuracy = 1)
) +
# labels & theme
labs(
x        = "GDP per Capita (2017 USD)",
y        = "PWT Human Capital Index",
) +
theme_minimal(base_size = 14) +
theme(
plot.title      = element_text(face = "bold"),
plot.subtitle   = element_text(margin = margin(b = 8)),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
########### Analysis of Philadelpha Eviction Data ##########
df_evictions <- read.table(
file      = "data/philadelphia/summary-table.txt",  # path to your CSV
header    = TRUE,                    # first row has column names
sep       = ",",                     # fields separated by commas
quote     = "\"",                    # double quotes around fields
stringsAsFactors = FALSE             # keep character columns as character
)
setwd("~/Library/CloudStorage/OneDrive-Personal/Research/Urban Proj/Evictions")
########### Analysis of Philadelpha Eviction Data ##########
df_evictions <- read.table(
file      = "data/philadelphia/summary-table.txt",  # path to your CSV
header    = TRUE,                    # first row has column names
sep       = ",",                     # fields separated by commas
quote     = "\"",                    # double quotes around fields
stringsAsFactors = FALSE             # keep character columns as character
)
# Print the number of observations of total_rent that are NOT null and > 0
print(paste("Number of observations of total_rent that are NOT null and > 0:",
sum(!is.na(df_evictions$total_rent) & df_evictions$total_rent > 0)))
print(paste("Number of observations of total_rent that are NOT null and > 0:",
sum(!is.na(df_evictions$total_rent) & df_evictions$total_rent > 0)))
View(df_evictions)
View(df_evictions)
print(paste("Number of observations of ongoing_rent that are NOT null and > 0:",
sum(!is.na(df_evictions$ongoing_rent) & df_evictions$ongoing_rent > 0)))
View(df_evictions)
# Restrict data to be years between 2000 and 2025
df_evictions <- subset(df_evictions, year >= 2000 & year <= 2025)
# Print the number of observations with ongoing_rent that are NOT null and > 0 AND
# total_rent that are NOT null and > 0
print(paste("Number of observations with ongoing_rent and total_rent that are NOT null and > 0:",
sum(!is.na(df_evictions$ongoing_rent) & df_evictions$ongoing_rent > 0 &
!is.na(df_evictions$total_rent) & df_evictions$total_rent > 0)))

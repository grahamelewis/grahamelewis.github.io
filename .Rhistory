library(bea.R)
beaKey <- "09C377ED-00AA-4B83-944C-1887E9532A4B"
# Download NIPA Table 1.1.5
NIPA_1_1_5 <- specs <- list(
'UserID' = beaKey,
'Method' = 'GetData',
'datasetname' = 'NIPA',
'TableID' = '1.1.5',
'Frequency' = 'Q',
'Year' = '1980,1990,2000,2010',
'ResultFormat' = 'json'
)
df <- beaGet(NIPA_1_1_5);
df <- beaGet(NIPA_1_1_5, asWide = FALSE);
library(bea.R)
beaKey =  "09C377ED-00AA-4B83-944C-1887E9532A4B"
#Personal Income Per Capita
#Specify request parameters
pcinc_req <- list(UserID   = beaKey,
Method   = 'getdata',
LineCode   = '1',
TableName  = 'CA1',
Frequencu  = 'a',
DatasetName = 'regionalincome',
Year     = '2015,2016',
GeoFIPS   = 'state')
#Send parameters via beaGet
pcinc_regional <- beaGet(pcinc_req)
pcpce_req <- list(UserID = beaKey,
Method = 'GetData',
DatasetName = 'RegionalProduct',
Component = 'PCPCE_SAN',
IndustryID = '1' ,
Year = '2015,2016',
GeoFIPS = 'state',
Frequency = 'a')
#Send parameters via beaGet
pcpce <- beaGet(pcpce_req)
# Call 'file.csv'
data <- read.csv("file.csv")
# Call 'file.csv'
data <- read.csv("file.csv", "rt")
# Call 'file.csv'
data <- read.csv("file.csv")
ls
# Call 'file.csv'
# Change directory to Desktop
setwd("~/Desktop")
data <- read.csv("file.csv")
View(data)
library(readr)
# Define the path to the zip file
zip_file <- "data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path(unzip_dir, "FAM1984.txt")
# Necessary library
library(readr)
install.packages("tidyverse")
# Define the path to the zip file
zip_file <- "data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path(unzip_dir, "FAM1984.txt")
library(readr)
# Define the path to the zip file
zip_file <- "data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path(unzip_dir, "FAM1984.txt")
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path(unzip_dir, "FAM1984.txt")
txt_file <- file.path("../data/fam_data/fam1984/FAM1984.txt")
library(readr)
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path(unzip_dir, "/FAM1984.txt")
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
txt_file <- file.path("../data/fam_data/", "fam1984/FAM1984.txt")
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
# Corrected path for the extracted file
txt_file <- file.path(unzip_dir, "FAM1984.txt")
# Check if the file exists
print(file.exists(txt_file))  # Should return TRUE if successful
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir)
# Corrected path for the extracted file
txt_file <- file.path(unzip_dir, "FAM1984.txt")
list.files(unzip_dir)
# Define the path to the zip file
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir, list = TRUE)
zip_file <- "../data/fam_data/fam1984.zip"
# Unzip the file to a temporary directory and get the path of the extracted .txt file
unzip_dir <- tempdir()
unzip(zip_file, exdir = unzip_dir, list = TRUE)
file.exists("../data/fam_data/fam1984.zip")
file.exists("../data/fam_data/fam1984")
file.exists("../data/fam_data/fam1984/FAM1984.txt")
ls
install.packages("here")
library(here)
setwd(here::here())
file.exists("../data/fam_data/fam1984/FAM1984.txt")
getwd()
# Plot the judgement_rate by the WRLURI
main_DF %>% ggplot(aes(x = WRLURI18, y = judgement_rate)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", fill = "gray") +
labs(title = "Wharton Residential Land Use Regulation Index vs. Eviction Rate",
x = "Wharton Residential Land Use Regulation Index",
y = "Eviction Rate") +
theme_bw()
library("haven")
library("dplyr")
library("tidycensus")
library("tidyverse")
library("stringr")
############ Wharton Residential Land Use Regulation Index ############
# Import .dta file
WRLURI <- read_dta("data/WRLURI_01_15_2020.dta")
setwd("~/Library/CloudStorage/OneDrive-Personal/Research/Urban Proj/Evictions")
library("haven")
library("dplyr")
library("tidycensus")
library("tidyverse")
library("stringr")
############ Wharton Residential Land Use Regulation Index ############
# Import .dta file
WRLURI <- read_dta("data/WRLURI_01_15_2020.dta")
# Convert to string and pad with leading zeros of length 5
WRLURI$fipsplacecode18 <- str_pad(WRLURI$fipsplacecode18, width = 5, side = "left", pad = "0")
# Create a new column called stateplace_fips that concatenates the state and place FIPS codes
WRLURI$id <- paste0(WRLURI$statecode_str, WRLURI$fipsplacecode18)
# Keep id, statecode_str, fidsplacecode18, countyname18, communityname18, & WRLURI18 columns
WRLURI <- WRLURI %>% select(id, statecode_str, fipsplacecode18, countyname18, communityname18, WRLURI18)
############ Eviction Lab Data ############
# Import the place_proprietary_2000_2018.csv file
evictionLab <- read_csv("data/place_proprietary_2000_2018.csv")
# Keep only values where "year" == 2018
evictionLab <- evictionLab %>% filter(year == 2018)
############ Population Data ############
# Import the population data
pop_CB <- read_csv("data/PEP_2018_PEPANNRSIP.US12A_with_ann.csv", skip = 1)
pop_CB <- pop_CB %>% rename(fips_id = `Target Geo Id2`) %>% rename(town_pop = `Geography...8`) %>%
rename(pop_total = `Population Estimate (as of July 1) - 2018`) %>%
select(fips_id, town_pop, pop_total) %>% rename(id = fips_id)
# Import the population growth data
pop_growth_CB <- read_csv("data/PEP_2018_PEPANNCHIP.US12A_with_ann.csv", skip = 1)
pop_growth_CB <- pop_growth_CB %>% rename(fips_id = `Target Geo Id2`) %>%
rename(pop_change = `Change, 2017 to 2018 - Number`) %>%
select(fips_id, pop_change) %>% rename(id = fips_id)
pop_CB <- merge(pop_CB, pop_growth_CB, by = "id")
regul_DF <- merge(WRLURI, pop_CB, by = "id")
############ Income Data (ACS 5 year estimates) ############
# census_api_key("c873e3fadf885f228f139f37ff2690684b8d6565", install = "TRUE")
acs18 <- load_variables(year = 2018,
dataset = "acs5",
cache = TRUE)
CBS_data <- get_acs(geography = "place",
variables = c("DP03_0062E", "DP03_0063E", "DP03_0009PE", "DP03_0096PE", "DP03_0128PE", "S1201_C01_001E", "S1201_C04_016E", "DP04_0005E", "DP04_0142PE", "DP04_0001E"),
year = 2018,
survey = "acs5")
# Turn the variable into long format (each unique entry in 'variable' column will become a new column)
CBS_data <- CBS_data %>% pivot_wider(names_from = variable, values_from = c(estimate, moe)) %>%
rename(id = "GEOID") %>%
rename(median_income = "estimate_DP03_0062") %>% rename(moe_median_income = "moe_DP03_0062") %>%
rename(mean_income = "estimate_DP03_0063") %>% rename(moe_mean_income = "moe_DP03_0063") %>%
rename(unempl_rate = "estimate_DP03_0009P") %>% rename(moe_unempl_rate = "moe_DP03_0009P") %>%
rename(hlth_insur_cov = "estimate_DP03_0096P") %>% rename(moe_hlth_insur_cov = "moe_DP03_0096P") %>%
rename(pov_rate = "estimate_DP03_0128P") %>% rename(moe_pov_rate = "moe_DP03_0128P") %>%
rename(tot_pop_dv = "estimate_S1201_C01_001") %>% rename(moe_tot_pop_dv = "moe_S1201_C01_001") %>%
rename(div = "estimate_S1201_C04_016") %>% rename(moe_div = "moe_S1201_C04_016") %>%
rename(vac_rate = "estimate_DP04_0005") %>% rename(moe_vac_rate = "moe_DP04_0005") %>%
rename(prct_rent_ov_35_inc = "estimate_DP04_0142P") %>% rename(moe_prct_rent_ov_35_inc = "moe_DP04_0142P") %>%
rename(tot_housing_units = "estimate_DP04_0001") %>% rename(moe_tot_housing_units = "moe_DP04_0001")
CBS_data$div_rate <- (CBS_data$div / CBS_data$tot_pop_dv)*100
regul_DF <- merge(regul_DF, CBS_data, by = "id")
main_DF <- merge(regul_DF, evictionLab, by = "id")
############ Analysis ############
# Plot the Wharton Residential Land Use Regulation Index versus the Rental Vacancy Rate
main_DF %>% ggplot(aes(x = WRLURI18, y = vac_rate)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", fill = "gray") +
labs(title = "Wharton Residential Land Use Regulation Index vs. Rental Vacancy Rate",
x = "Wharton Residential Land Use Regulation Index",
y = "Rental Vacancy Rate") +
theme_bw()
# Regress the Wharton Residential Land Use Regulation Index on the Rental Vacancy Rate,
# median household income, unemployment rate, and health insurance coverage rate
# Standardize median_income, unempl_rate, and hlth_insur_cov
main_DF$median_income_std <- scale(main_DF$median_income)
main_DF$unempl_rate_std <- scale(main_DF$unempl_rate)
main_DF$hlth_insur_cov_std <- scale(main_DF$hlth_insur_cov)
main_DF$pop_total_std <- scale(main_DF$pop_total)
main_DF$pop_change_std <- scale(main_DF$pop_change)
main_DF$tot_housing_units_std <- scale(main_DF$tot_housing_units)
model_regl <- lm(vac_rate ~ WRLURI18, data = main_DF)
summary(model_regl)
model_evict <- lm(vac_rate ~ judgement_rate, data = main_DF)
summary(model_evict)
model1 <- lm(vac_rate ~ WRLURI18 + judgement_rate + pop_total_std + pop_change_std + tot_housing_units_std, data = main_DF)
summary(model1)
model2 <- lm(vac_rate ~ WRLURI18 + judgement_rate + pop_total_std + pop_change_std + tot_housing_units_std +  median_income_std + unempl_rate_std + hlth_insur_cov_std, data = main_DF)
summary(model2)
# Plot the Judgement Rate versus the Rental Vacancy Rate
main_DF %>% ggplot(aes(x = judgement_rate, y = vac_rate)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", fill = "gray") +
labs(title = "Eviction Rate vs. Rental Vacancy Rate",
x = "Eviction Rate",
y = "Rental Vacancy Rate") +
theme_bw()
# Plot the judgement_rate by the WRLURI
main_DF %>% ggplot(aes(x = WRLURI18, y = judgement_rate)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", fill = "gray") +
labs(title = "Wharton Residential Land Use Regulation Index vs. Eviction Rate",
x = "Wharton Residential Land Use Regulation Index",
y = "Eviction Rate") +
theme_bw()
setwd("~/Library/CloudStorage/OneDrive-Personal/Teaching/IntermediateMacro_I")
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
View(df_PH)
View(df_SK)
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHL646NWDB)
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
df <- bind_rows(df_SK, df_PH)
View(df)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
select(year, realGDP, country)
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
View(df)
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country") +
theme_minimal() +
scale_x_discrete(breaks = seq(1960, 2020, by = 5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df)
View(df)
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP per capita of South Korea and Philippines",
x = "Year",
y = "Real GDP per capita (in billions of USD)",
color = "Country") +
theme_minimal() +
scale_x_discrete(breaks = seq(1960, 2020, by = 5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country") +
theme_minimal(
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country")
View(df)
View(df)
View(df)
# Lecture 3 plot
# Load in dplyr and ggplot
library(dplyr)
library(ggplot2)
df_SK <- read.csv("data_lecture3/korea_realGDP.csv")
df_PH <- read.csv("data_lecture3/philippines_realGDP.csv")
# Convert SK observation_date to "year" and YYYY-MM-DD to YYYY
df_SK$observation_date <- as.Date(df_SK$observation_date, format = "%Y-%m-%d")
df_SK$year <- format(df_SK$observation_date, "%Y")
# Convert PH observation_date to "year" and YYYY-MM-DD to YYYY
df_PH$observation_date <- as.Date(df_PH$observation_date, format = "%Y-%m-%d")
df_PH$year <- format(df_PH$observation_date, "%Y")
# Rename SK "PCAGDPKRA646NWDB to "realGDP"
df_SK <- df_SK %>%
rename(realGDP = PCAGDPKRA646NWDB)
# Rename PH "PCAGDPPHL646NWDB to "realGDP"
df_PH <- df_PH %>%
rename(realGDP = PCAGDPPHA646NWDB)
# Generate a new column "country" for SK and PH
df_SK$country <- "South Korea"
df_PH$country <- "Philippines"
# Only keep "year", "realGDP", and "country" columns
df_SK <- df_SK %>%
select(year, realGDP, country)
df_PH <- df_PH %>%
select(year, realGDP, country)
# Append the two dataframes
df <- bind_rows(df_SK, df_PH)
# Plot the data
ggplot(df, aes(x = year, y = realGDP, color = country)) +
geom_line() +
labs(title = "Real GDP of South Korea and Philippines",
x = "Year",
y = "Real GDP (in billions of USD)",
color = "Country")
ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
View(df)
df <- bind_rows(df_SK, df_PH)
df <- df %>%
mutate(
year    = as.numeric(as.character(year)),
realGDP = as.numeric(realGDP),
country = trimws(as.character(country))
)
# Plot the data
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
title = "Real GDP by Country (1960–2020)",
x     = "Year",
y     = "Real GDP",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom"
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
theme_minimal(base_size = 14) +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
scale_x_continuous(breaks = seq(1960, 2020, by = 10)) +
theme_minimal() +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
df %>% ggplot(aes(x = year, y = realGDP, color = country)) +
geom_line(size = 1) +
labs(
x     = "Year",
y     = "Real GDP per capita (current USD)",
color = "Country"
) +
scale_x_continuous(breaks = seq(1960, 2020, by = 10)) +
scale_y_continuous(labels = scales::dollar_format( suffix = "")) +
theme_minimal() +
theme(
plot.title    = element_text(face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 16),   # title of the legend
legend.text = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 14),
axis.text.x = element_text(size = 14)
)
